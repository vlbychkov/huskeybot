from Lib import *
from Other import *
#–Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
TOKEN = '' # –¢–æ–∫–µ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ
bot = telebot.TeleBot(TOKEN)
menu_remove=types.ReplyKeyboardRemove() 

#_______________________________________________________________________________________________________________________________________________________________
@bot.message_handler(commands=['setcommand'])
def setcommand(message):
	msg = bot.send_message(message.chat.id, "–¢–∞–∫-—Å, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. ")
	bot.register_next_step_handler(msg, setcommand2)
def setcommand2(message):
	global regCommand
	regCommand=message.text
	if regCommand=="-" or regCommand=="–í—ã—Ö–æ–¥" or regCommand=="–≤—ã—Ö–æ–¥":
		pass
	else:
		msg = bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. ")
		bot.register_next_step_handler(msg, setcommand3)
def setcommand3(message):
	global nameCity
	nameCity=message.text
	if nameCity=="-" or nameCity=="–í—ã—Ö–æ–¥" or nameCity=="–≤—ã—Ö–æ–¥":
		pass
	else:
		with sqlite3.connect('CityandCommand.db') as con:
			cur = con.cursor()
			cur.execute("INSERT INTO CC (nameCommand, cityCommand) VALUES (?,?)",
					(regCommand, nameCity))
			con.commit()
		bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ. ")


#_______________________________________________________________________________________________________________________________________________________________

@bot.message_handler(commands=['lookcommand'])
def lookcommand(message):
	City=[]
	command = []
	index=0
	commandCity = ''
	with sqlite3.connect('CityandCommand.db') as con:
		cur=con.cursor()
		cur.execute("SELECT * FROM CC")
		for row in cur.fetchall():
			if row[1] not in City:
				City.append(row[1])
		print(City)
		for i in City:
			#print(i + ' AOAOAO')
			cur.execute("SELECT * FROM CC")
			command.append('\n'+i+": ")
			for prow in cur.fetchall():
				if i in prow[1]:
					command.append(prow[0]+ ', ')
	for i in command:
		commandCity=commandCity+command[index]
		index+=1
	if len(commandCity)==0:
		bot.send_message(message.chat.id, "–í –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –≤–æ–æ–±—â–µ. ")
	else:
		bot.send_message(message.chat.id, commandCity)

#_______________________________________________________________________________________________________________________________________________________________
#–ö–æ–º–∞–Ω–¥—ã
#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ + –≤—ã–∑–æ–≤ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=['start']) 
def handle_start(message):
	bot.send_message(message.chat.id,'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ' + str(message.from_user.first_name),reply_markup=markup )
	bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ë–æ—Ç —É—Å—Ç—Ä–æ–µ–Ω –ø–æ —Ç–∏–ø—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –í –Ω–µ–≥–æ –º–æ–∂–Ω–æ: –î–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å, —Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã.")
	bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.')
	print(message.from_user.first_name)

#_______________________________________________________________________________________________________________________________________________________________


@bot.message_handler(commands=['help','–ø–æ–º–æ—â—å'])
def handler_help(message):
	bot.send_message(message.chat.id,"""–í–∏–∂—É, —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å...
–°–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–π,
–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/setcommand - –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—É.
/lookcommand - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –≥–æ—Ä–æ–¥–∞.
/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏–ª–∏ /instruction - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
/setdate –∏–ª–∏ /—É—Å—Ç–∞–Ω–æ–≤–∫–∞–¥–∞—Ç—ã - –°–æ–∑–¥–∞–π —Å–æ–±—ã—Ç–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –¥–∞—Ç—É. 
/lookdate –∏–ª–∏ /–±–ª–∏–∂–¥–∞—Ç–∞ - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏ –µ–≥–æ –¥–∞—Ç—ã.
/monthdate –∏–ª–∏ /–¥–∞—Ç–∞–Ω–∞–º–µ—Å—è—Ü - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—Ç –Ω–∞ –º–µ—Å—è—Ü.
/changedate –∏–ª–∏ /–∏–∑–º–µ–Ω–∞–¥–∞—Ç—ã - –ò–∑–º–µ–Ω–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è. p.s. –∑–∞–±—ã–ª –≤–ø–∏—Å–∞—Ç—å - –ø–æ–∫–∞ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å.
/cpass - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è.
/deletedate –∏–ª–∏ /—É–¥–∞–ª–µ–Ω–∏–µ–¥–∞—Ç—ã - –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã.
–¢–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /scommands - –ü–æ–∫–∞–∑ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
–ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏ –∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!""")
	print(message.from_user.first_name)

@bot.message_handler(commands=['scommands'])
def scommand(message):
	bot.send_message(message.chat.id,"""–≠—Ç–æ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–ª–æ –≤–ª–∏—è—é—Ç –Ω–∞ —á—Ç–æ-—Ç–æ: 
/time - –í—ã–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–∏.
/random - –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ 10.
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ —Ñ–æ—Ç–æ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã. """)


#–ö–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞ + —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
@bot.message_handler(commands=['end']) 
def handle_end(message):
	bot.reply_to(message, '–õ–∞–¥–Ω–æ, —Å–≤–æ—Ä–∞—á–∏–≤–∞—é –ø–∞–Ω–µ–ª—å. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å - /start.',reply_markup=menu_remove)
	print(message.from_user.first_name)
#_______________________________________________________________________________________________________________________________________________________________
#–í—ã–∑–æ–≤ –¥–∞—Ç—ã
@bot.message_handler(commands=['time','–≤—Ä–µ–º—è']) 
def handle_time(message):
	bot.send_message(message.chat.id, "–¢—ã –∂–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ —Å–∏–¥–∏—à—å? –ù–µ –º–æ–≥ –Ω–∞ –Ω–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –ê —á–∞—Å–æ–≤ —É —Ç–µ–±—è —Ç–æ–∂–µ –Ω–µ—Ç? –î–∞ –ª–∞–¥–Ω–æ —Ç–µ–±–µ...")
	bot.reply_to(message,'–ù–∞,—Å–º–æ—Ç—Ä–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É: '+ maneTimeDate)
	bot.send_message(message.chat.id,"–ù–∞–¥–µ—é—Å—å, –≤—Ä–µ–º—è —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ —Ö–æ—Ç—å? ü§î")

	
#_______________________________________________________________________________________________________________________________________________________________
@bot.message_handler(commands=['test'])
def test(message):
	bot.send_message(message.chat.id, message.chat.id)
	bot.send_message(message.chat.id, message.chat.type)
	bot.send_message(message.chat.id, message.chat.username)
	bot.send_message(message.chat.id, message.chat.title)
#_______________________________________________________________________________________________________________________________________________________________

@bot.message_handler(commands=['monthdate','–¥–∞—Ç–∞–Ω–∞–º–µ—Å—è—Ü'])     # –í–´–ó–û–í –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–ö–ê–ó–ê –î–ê–¢–´ –ù–ê –ú–ï–°–Ø–¶
def handle_okey(message):
	msg = bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã? ")
	bot.register_next_step_handler(msg, commandAOAO)
	bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–≤–æ–¥–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ —ç—Ç–∞–ø–µ, —Ç–æ –≤–≤–µ–¥–∏ '-' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–í—ã—Ö–æ–¥'")
def commandAOAO(message):
	global nameCommand
	global index
	index = 0
	nameCommand = message.text
	if nameCommand =="-" or nameCommand =="exit" or nameCommand=="–≤—ã—Ö–æ–¥" or nameCommand=="–í—ã—Ö–æ–¥":
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	else:
		try:
			with sqlite3.connect('HD.db') as con:
				cur = con.cursor()
				cur.execute("SELECT * FROM HD")
				for row in cur.fetchall():
					if row[0] == nameCommand:
						index+=1
				if index>0:
					msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –¢–µ–±–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–æ–º–Ω–∞–¥–∏—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—ã.")
					bot.register_next_step_handler(msg, OPass)
				elif index==0:
					bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–æ–º–∞–Ω–µ /setdate .")
		except UnboundLocalError:
			pass
def OPass(message):
	global index
	passwordCommand = message.text
	if passwordCommand =="-" or passwordCommand =="exit" or passwordCommand=="–≤—ã—Ö–æ–¥" or passwordCommand=="–í—ã—Ö–æ–¥":
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	else:
		try:
			passwordCommand = int(message.text)	
			with sqlite3.connect("HD.db") as con:
				cur = con.cursor()
				cur.execute("SELECT * FROM HD")
				for row in cur.fetchall():
					if nameCommand ==row[0] and int(passwordCommand)==row[3]:
						if row[1][3:5]==maneDate: # –î–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤—Å–µ –¥–∞—Ç—ã –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü
							bot.send_message(message.chat.id, row[2] + " : "+row[1])
		except ValueError as e:
			pass

#_______________________________________________________________________________________________________________________________________________________________

@bot.message_handler(commands=['lookdate', '–±–ª–∏–∂–¥–∞—Ç–∞']) # –í–´–ó–û–í –ë–õ–ò–ñ–ê–ô–®–ï–ô –î–ê–¢–´
def handler_okey(message):
	msg = bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã? ")
	bot.register_next_step_handler(msg, OPassword)
	bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–≤–æ–¥–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ —ç—Ç–∞–ø–µ, —Ç–æ –≤–≤–µ–¥–∏ '-' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–í—ã—Ö–æ–¥'")
def OPassword(message):
	global nameCommand
	global index
	index = 0
	nameCommand = message.text
	if nameCommand =="-" or nameCommand =="exit" or nameCommand=="–≤—ã—Ö–æ–¥" or nameCommand=="–í—ã—Ö–æ–¥":
		bot.send_message(message.chat.id,"–õ–∞–¥–Ω–æ.")
	else:
		try:
			with sqlite3.connect('HD.db') as con:
				cur = con.cursor()
				cur.execute("SELECT * FROM HD")
				for row in cur.fetchall():
					if row[0] == nameCommand:
						index+=1
				if index>0:
					msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –¢–µ–±–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–æ–º–Ω–∞–¥–∏—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—ã.")
					bot.register_next_step_handler(msg, OMl)
				elif index==0:
					bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–æ–º–∞–Ω–µ /setdate .")
		except UnboundLocalError:
			pass
def OMl(message):
	index=1
	secondIndex=0
	massivDate = []
	print(nameCommand)
	passwordCommand = message.text
	if passwordCommand =="-" or passwordCommand =='exit' or passwordCommand=="Exit" or passwordCommand =="–í—ã—Ö–æ–¥" or passwordCommand == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	with sqlite3.connect('HD.db') as con:
		cur = con.cursor()
		cur.execute("SELECT * FROM HD")
		for row in cur.fetchall():
			if int(passwordCommand) == row[3]:
				print("–ü—Ä–æ—à–ª–æ")
				print(maneDate)
				print(row[1][3:5])
				if row[1][3:5]==maneDate:
					print("–ü–†–û–®–õ–û")
					massivDate.append(row[1])
					secondIndex+=1
				elif row[1][3:5]>=maneDate:
					bot.send_message(message.chat.id, "–¢–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–∞—Ö. " + row[2] +" : "+row[1]) 
		if int(passwordCommand)!= row[3] and secondIndex==0:
			bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å. /lookdate")
		elif secondIndex>0:
			if row[3]==int(passwordCommand):
				otherMassivDate = massivDate[0][0:2]
				if "0" in otherMassivDate:
					firstDay = otherMassivDate.lstrip("0")
				else:
					firstDay = otherMassivDate
				nearestNumber = massivDate[0]
				for i in range(len(massivDate)):
					try:
						secondDay = massivDate[index][0:2]
						if "0" in secondDay:
							secondSecondDay = secondDay.lstrip("0")
						else:
							secondSecondDay = secondDay
						if int(firstDay)>int(secondSecondDay):
							otherMassivDate = massivDate[index][0:2]
							if "0" in otherMassivDate:
								firstDay = otherMassivDate.lstrip("0")
							else:
								firstDay = otherMassivDate
							nearestNumber = massivDate[index]
						index+=1
					except IndexError as e:
						pass
				bot.send_message(message.chat.id, nearestNumber)	
#_______________________________________________________________________________________________________________________________________________________________

@bot.message_handler(commands=['setdate',"—É—Å—Ç–∞–Ω–æ–≤–∫–∞–¥–∞—Ç—ã"])
def whatscommands(message):
	msg=bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. –ï—Å–ª–∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –ë–æ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç —Ç–µ–±—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ")
	bot.register_next_step_handler(msg, ifnameCommand)
	bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–≤–æ–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ —ç—Ç–∞–ø–µ, —Ç–æ –≤–≤–µ–¥–∏ '-' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–í—ã—Ö–æ–¥'.")
def ifnameCommand(message):
	index=0
	global nameCommand
	nameCommand = message.text
	if any(x for x in '/' if x in nameCommand)==True:
		bot.send_message(message.chat.id,"–¢—ã –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –±–æ—Ç–∞, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ /setdate –µ—â–µ —Ä–∞–∑.")
	elif nameCommand =="-" or nameCommand =="exit" or nameCommand=="–≤—ã—Ö–æ–¥" or nameCommand=="–í—ã—Ö–æ–¥":
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	else:
		with sqlite3.connect('HD.db') as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM HD")
			for row in cur.fetchall():
				if row[0] == nameCommand:
					index+=1
			print(index)
			if index>0:
				msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –¢–µ–±–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–æ–º–∞–Ω–¥–∏—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—ã.")
				bot.register_next_step_handler(msg, OPL)
			elif index==0:
				msg = bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–∏—Ñ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö. ") #–ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ò –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–¢
				bot.register_next_step_handler(msg, newCommand)
def newCommand(message):
	global passwordCommand
	try:
		passwordCommand = int(message.text)
		if passwordCommand =="-" or passwordCommand =='exit' or passwordCommand=="Exit" or passwordCommand =="–í—ã—Ö–æ–¥" or passwordCommand == '–≤—ã—Ö–æ–¥':
			bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
		else:
			msg = bot.send_message(message.chat.id,"""–•–æ—Ä–æ—à–æ, —Å–æ–æ–±—â–∏ —Å–≤–æ–∏–º —Ç–æ–≤–∞—Ä–∏—â–∞–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞—Ç—ã. –ù–æ –Ω–µ —Å–æ–æ–±—â–∞–π –¥—Ä—É–≥–∏–º –ª—é–¥—è–º!
–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì . –ü—Ä–∏–º–µ—Ä: 20.07.19 –∏–ª–∏ 20.07.2019.""")
			bot.register_next_step_handler(msg, whatsEvent)
	except ValueError as e:
		bot.send_message(message.chat.id, "–¢—ã –≤–≤–µ–ª –Ω–µ –ø–∞—Ä–æ–ª—å. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–æ–ª—å –∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ /setdate –µ—â–µ —Ä–∞–∑. ")

def OPL(message):
	index=0
	global passwordCommand
	global nameCommand
	global nameDate
	try:
		passwordCommand = message.text
		if passwordCommand =="-" or passwordCommand =='exit' or passwordCommand=="Exit" or passwordCommand =="–í—ã—Ö–æ–¥" or passwordCommand == '–≤—ã—Ö–æ–¥':
			bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
		else:
			with sqlite3.connect("HD.db") as con:
				cur = con.cursor()
				cur.execute("SELECT * FROM HD")
				for row in cur.fetchall():
					if row[3]==int(passwordCommand):
						index+=1
				if index>0:
					msg = bot.send_message(message.chat.id, "–ü–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º. –ö–∞–∫–∞—è –¥–∞—Ç–∞? ")
					bot.register_next_step_handler(msg, whatsEvent)
				elif index==0:
					bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ /setdate . ")
	except ValueError:
		pass
def whatsEvent(message):
	try:	
		global passwordCommand
		global nameCommand
		global nameDate
		nameDate = message.text
		if (len(nameDate)!=8 and len(nameDate)!=10):
			bot.send_message(message.chat.id, "–¢—ã –≤–≤–µ–ª –Ω–µ —Ç—É –¥–∞—Ç—É. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì . –ò—Å–ø—Ä–∞–≤—å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setdate –µ—â—ë —Ä–∞–∑. ")
		elif nameDate == "-" or nameDate == "–í—ã—Ö–æ–¥" or nameDate == "–≤—ã—Ö–æ–¥":
			bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
		elif any(x for x in wordUp if x in nameDate)==True:
			bot.send_message(message.chat.id, "–¢—ã –≤–≤–µ–ª –Ω–µ –¥–∞—Ç—É.")
		elif nameDate[6:]>=maneYear or maneDate>=maneyear[6:] or nameDate>=maneDate:
			msg = bot.send_message(message.chat.id, "–ê –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ? ")
			bot.register_next_step_handler(msg, writeAll)
	except ValueError as e:
		pass
def writeAll(message):
	try:
		global passwordCommand
		global nameCommand
		global nameDate
		global nameEvent
		nameEvent = message.text
		if nameEvent == "-" or nameEvent == "–í—ã—Ö–æ–¥" or nameEvent == "–≤—ã—Ö–æ–¥":
			bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")

		else:
			with sqlite3.connect('HD.db') as con:
				cur = con.cursor()
				cur.execute("INSERT INTO HD (nameCommand, DateEvent, Event, PasswordCommand) VALUES (?,?,?,?)",
					(nameCommand, nameDate, nameEvent,passwordCommand))
				con.commit()
				cur.close()
			con.close()
			bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!!!")
	except ValueError as e:
		pass
#_______________________________________________________________________________________________________________________________________________________________

@bot.message_handler(commands=['cpass'])
def changepassword(message):
	msg = bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã? ")
	bot.register_next_step_handler(msg, securityPassword)
def securityPassword(message):
	global nameCommand
	global index
	index = 0
	nameCommand = message.text
	if nameCommand =="-" or nameCommand =='exit' or nameCommand=="Exit" or nameCommand =="–í—ã—Ö–æ–¥" or nameCommand == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ")
	else:
		try:
			with sqlite3.connect('HD.db') as con:
				cur = con.cursor()
				cur.execute("SELECT * FROM HD")
				for row in cur.fetchall():
					if row[0] == nameCommand:
						index+=1
				if index>0:
					msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –¢–µ–±–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–æ–º–Ω–∞–¥–∏—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—ã.")
					bot.register_next_step_handler(msg, OPL)
				elif index==0:
					bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–æ–º–∞–Ω–µ /setdate .")
		except UnboundLocalError:
			pass	
def OPL(message):
	index=0
	global passwordCommand
	passwordCommand = int(message.text)	
	if passwordCommand =="-" or passwordCommand =='exit' or passwordCommand=="Exit" or passwordCommand =="–í—ã—Ö–æ–¥" or passwordCommand == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ")
	else:
		with sqlite3.connect("HD.db") as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM HD")
			for row in cur.fetchall():
				if row[3]==passwordCommand:
					index+=1
					#if nameCommand == row[0]:
					#	bot.send_message(message.chat.id, row[2] +" : " + row[1])
			if index>0:
				msg = bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–∞—Ä–æ–ª—å —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?")
				bot.register_next_step_handler(msg, ChangePass)
			elif index==0:
				bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ —Ç–æ—Ç. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ /cpass –µ—â–µ —Ä–∞–∑")
def ChangePass(message):
	try:
		changepassword=message.text
		if changepassword =="-" or changepassword =='exit' or changepassword=="Exit" or changepassword =="–í—ã—Ö–æ–¥" or changepassword == '–≤—ã—Ö–æ–¥':
			bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ")
		else:
			with sqlite3.connect("HD.db") as con:
				cur = con.cursor()
				cur.execute("UPDATE HD SET PasswordCommand = (?) WHERE PasswordCommand=(?)", (int(changepassword), int(passwordCommand)))
				con.commit()
			bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ! ")
	except ValueError as e:
		bot.send_message(message.chat.id, "–¢—ã –≤–≤–µ–ª –Ω–µ –ø–∞—Ä–æ–ª—å –≤ –≤–∏–¥–µ —Ü–∏—Ñ—Ä. ")




#_______________________________________________________________________________________________________________________________________________________________

@bot.message_handler(commands=["deletedate", "—É–¥–∞–ª–µ–Ω–∏–µ–¥–∞—Ç—ã"])
def DeleteDate(message):
	msg=bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã? ")
	bot.register_next_step_handler(msg, LogPassword)
	bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–≤–æ–¥–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ —ç—Ç–∞–ø–µ, —Ç–æ –≤–≤–µ–¥–∏ '-' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–í—ã—Ö–æ–¥'")
def LogPassword(message):
	index=0
	global nameCommand
	nameCommand = message.text
	with sqlite3.connect('HD.db') as con:
		cur = con.cursor()
		cur.execute("SELECT * FROM HD")
		for row in cur.fetchall():
			if row[0] == nameCommand:
				index+=1
		if index>0:
			msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –¢–µ–±–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–æ–º–Ω–∞–¥–∏—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—ã.")
			bot.register_next_step_handler(msg, iDontKnow)
		elif index==0:
			bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–æ–º–∞–Ω–¥–µ /writedate . ") #–ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ò –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–¢
def iDontKnow(message):
	index=0
	passwordCommand = message.text
	if passwordCommand =="-" or passwordCommand =='exit' or passwordCommand=="Exit" or passwordCommand =="–í—ã—Ö–æ–¥" or passwordCommand == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ")
	else:
		with sqlite3.connect("HD.db") as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM HD")
			for row in cur.fetchall():
				if row[3]==int(passwordCommand):
					index+=1
					if nameCommand == row[0]:
						bot.send_message(message.chat.id, row[2] +" : " + row[1])
			if index>0:
				for row in cur.fetchall():
					if nameCommand == row[0]:
						bot.send_message(message.chat.id, row[2] +" : " + row[1])
				msg = bot.send_message(message.chat.id, "–ü–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º. –ö–∞–∫—É—é –î–ê–¢–£ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?")
				bot.register_next_step_handler(msg, DeleteDate2)
				for row in cur.fetchall():
					if nameCommand == row[0]:
						bot.send_message(message.chat.id, row[2] +" : " + row[1])
			elif index==0:
				bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–æ–º–∞–Ω–¥–µ /setdate")
def DeleteDate2(message):
	deletedate = message.text
	with sqlite3.connect("HD.db") as con:
		cur = con.cursor()
		cur.execute("DELETE FROM HD WHERE DateEvent=(?)",(deletedate,))
		con.commit()
	bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")

#_______________________________________________________________________________________________________________________________________________________________



@bot.message_handler(commands=['changedate'])
def changedate(message):
	msg=bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã? ")
	bot.register_next_step_handler(msg, otherchangedate)
	bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–≤–æ–¥–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–º-–ª–∏–±–æ —ç—Ç–∞–ø–µ, —Ç–æ –≤–≤–µ–¥–∏ '-' –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–í—ã—Ö–æ–¥'")
def otherchangedate(message):
	index=0
	global nameCommand
	nameCommand = message.text
	if nameCommand =="-" or nameCommand =='exit' or nameCommand=="Exit" or nameCommand =="–í—ã—Ö–æ–¥" or nameCommand == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	else:
		with sqlite3.connect('HD.db') as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM HD")
			for row in cur.fetchall():
				if row[0] == nameCommand:
					index+=1
			if index>0:
				msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –¢–µ–±–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –∫–æ–º–Ω–∞–¥–∏—Ä –∏–ª–∏ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—ã.")
				bot.register_next_step_handler(msg, Okey)
			elif index==0:
				bot.send_message(message.chat.id, "–¢–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–æ–º–∞–Ω–¥–µ /setdate . ")
def Okey(message):
	index=0
	passwordCommand = int(message.text)	
	if passwordCommand =="-" or passwordCommand =='exit' or passwordCommand=="Exit" or passwordCommand =="–í—ã—Ö–æ–¥" or passwordCommand == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ")
	else:
		with sqlite3.connect("HD.db") as con:
			cur = con.cursor()
			cur.execute("SELECT * FROM HD")
			for row in cur.fetchall():
				if row[3]==int(passwordCommand):
					index+=1
					if nameCommand == row[0]:
						bot.send_message(message.chat.id, row[2] +" : " + row[1])
			if index>0:
				for row in cur.fetchall():
					if nameCommand == row[0]:
						bot.send_message(message.chat.id, row[2] +" : " + row[1])
				msg = bot.send_message(message.chat.id, "–ü–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º. –í—ã–±–µ—Ä–∏ –î–ê–¢–£, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–∞–º—É –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. ")
				bot.register_next_step_handler(msg, definitionDateOrName)
			elif index==0:
				bot.send_message(message.chat.id, "–¢–∞–∫, –ø–∞—Ä–æ–ª—å –Ω–µ —Ç–æ—Ç. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å. ")
def definitionDateOrName(message):
	global DoN
	DoN=message.text
	msg = bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ, –º–µ–Ω—è–µ–º —Å–∞–º—É –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ? –í–≤–µ–¥–∏,–Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–∞—Ç–∞' –∏–ª–∏ '–°–æ–±—ã—Ç–∏–µ'")
	bot.register_next_step_handler(msg, definitionOfChoice)

def definitionOfChoice(message):
	Choice = message.text
	if Choice =="-" or Choice =='exit' or Choice=="Exit" or Choice =="–í—ã—Ö–æ–¥" or Choice == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	elif Choice == "–î–∞—Ç–∞" or Choice =="–î–∞—Ç—É" or Choice=="–¥–∞—Ç–∞" or Choice =="–¥–∞—Ç—É" or Choice == "–¥–∞—Ç":
		msg = bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é –î–ê–¢–£ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å? ")
		bot.register_next_step_handler(msg, updateDate)
	elif Choice == "–°–æ–±—ã—Ç–∏–µ" or Choice == "—Å–æ–±—ã—Ç–∏–µ" or Choice =="—Å–æ–±—ã—Ç–∏":
		msg = bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –°–û–ë–´–¢–ò–ï —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?")
		bot.register_next_step_handler(msg, updateEvent)
def updateDate(message):
	updateDate = message.text
	if updateDate =="-" or updateDate =='exit' or updateDate=="Exit" or updateDate =="–í—ã—Ö–æ–¥" or updateDate == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	else:
		with sqlite3.connect("HD.db") as con:
			cur = con.cursor()
			cur.execute("UPDATE HD SET DateEvent=(?) WHERE DateEvent=(?)",(updateDate, DoN))
			con.commit()
		bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")

def updateEvent(message):
	updateEvent = message.text
	if updateEvent =="-" or updateEvent =='exit' or updateEvent=="Exit" or updateEvent =="–í—ã—Ö–æ–¥" or updateEvent == '–≤—ã—Ö–æ–¥':
		bot.send_message(message.chat.id, "–õ–∞–¥–Ω–æ.")
	else:
		with sqlite3.connect("HD.db") as con:
			cur = con.cursor()
			cur.execute("UPDATE HD SET Event=(?) WHERE DateEvent=(?)",(updateEvent, DoN))
			con.commit()
		bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")




#_______________________________________________________________________________________________________________________________________________________________


@bot.message_handler(commands=['instruction','–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"])
def instruction(message):
	bot.send_message(message.chat.id, "–ë–æ—Ç –µ—â—ë –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º. –°–õ–ï–î–£–ô–¢–ï –ò–ù–°–¢–†–£–ö–¶–Ø–ú, –ü–û–ñ–ê–õ–£–ô–°–¢–ê. ")
	bot.send_message(message.chat.id, """–ü—Ä–∏ –≤–≤–æ–¥–µ /setdate –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ —Ç–∏–ø—É '–ú—Å–∫ –õ–∏—Å' –∏–ª–∏ –ø–æ—Ö–æ–∂–µ–µ.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É—Å–ª–æ–∂–Ω—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –∏ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤.
–ü–æ—Å–ª–µ –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö, —Ç–æ –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç—É –ë–∞–∑—É.
–ù–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞–∑–≥–ª–∞—à–∞—é—Ç—Å—è.
–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è - –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –≤–≤–æ–¥ –î–ê–¢–´ —Å–æ–±—ã—Ç–∏—è. –í–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì . –ü—Ä–∏–º–µ—Ä: 28.04.2019
–î–∞–ª—å—à–µ –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –ù–ê–ó–í–ê–ù–ò–ï —Å–æ–±—ã—Ç–∏—è.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª—å—à–∞—è –ø—Ä–æ—Å—å–±–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –≤ –º–∞—Ç–Ω–æ–º –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ. –í –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è.""")
	bot.send_message(message.chat.id, """–ü—Ä–∏ –≤–≤–æ–¥–µ /lookdate - –í–∞–º –ø–æ–∫–∞–∂—É—Ç –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª—è–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–∞–∫ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—à–ª–æ.
–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /deletedate - –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç—ã. –ü—Ä–æ—Å—å–±–∞ –Ω–µ –±–∞–ª–æ–≤–∞—Ç—å—Å—è, –¥–∞–±—ã –Ω–µ –≤–∑–±–µ—Å–∏—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.
–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /monthdate - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—Ç –∏ —Å–æ–±–∏—Ç—ã–π –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–µ—Å—è—Ü.
–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /changedate - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.""")
	bot.send_message(message.chat.id, """–î–ª—è —Å–≤—è–∑–∏,–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ:
Vk - https://vk.com/h4zci
Instagram - @huzzky
–ü–æ—á—Ç–∞ - vladislav.bychkov01@gmail.com
Telegram - @Huzkey
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ. 
–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.""")



#_______________________________________________________________________________________________________________________________________________________________

#–í—ã–∑–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@bot.message_handler(commands=['info',"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è","–∏–Ω—Ñ–æ","–∏–Ω—Ñ–∞"])
def sendphoto(message):
	photo = open('1.jpeg', 'rb')
	photo2 = open('Huskey.jpg', 'rb')
	bot.send_photo(message.chat.id, photo)
	bot.send_photo(message.chat.id, photo2)
	bot.send_message(message.chat.id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ @Huzkey. –ß–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã –ú–°–ö –õ.–ò.–°.")
	print(message.from_user.first_name)
#_______________________________________________________________________________________________________________________________________________________________


@bot.message_handler(commands = ['random',"—Ä–∞–Ω–¥–æ–º"])
def randomMessage(message):
	x = random.random()*10
	bot.send_message(message.chat.id ,int(x))
	print(message.from_user.first_name)

#_______________________________________________________________________________________________________________________________________________________________

#–ö–Ω–æ–ø–∫–∏
markup = types.ReplyKeyboardMarkup(row_width=4, resize_keyboard=True) #–ê–∫—Ç–∏–≤–∞—Ü–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥—É 
itembtn1 = types.KeyboardButton(' /time ') #–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ 1 
itembtn2 = types.KeyboardButton(' /lookdate') #–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ 2 
itembtn3 = types.KeyboardButton(' /setdate')
itembtn4 = types.KeyboardButton(' /help') #–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ 3 
itembtn5 = types.KeyboardButton(' /end')
markup.add(itembtn1, itembtn2, itembtn3, itembtn4 ,itembtn5) #–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä



#_______________________________________________________________________________________________________________________________________________________________
bot.polling()
